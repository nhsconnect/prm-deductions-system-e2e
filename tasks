#!/bin/bash

set -Eeo pipefail

###########################
# Local Config Parameters #
###########################

AWS_DEFAULT_REGION=eu-west-2
export NHS_SERVICE=system-e2e
AWS_HELPERS_VERSION=0.2.17
echo "AWS helper scripts version: $AWS_HELPERS_VERSION"

# Do not change the file name as the aws helper scripts depend on it
AWS_HELPERS_FILE="utils/$AWS_HELPERS_VERSION/aws-helpers"

mkdir -p "utils/$AWS_HELPERS_VERSION"

if [[ ! -f $AWS_HELPERS_FILE ]];then
  wget --quiet -O $AWS_HELPERS_FILE https://github.com/nhsconnect/prm-deductions-support-infra/releases/download/${AWS_HELPERS_VERSION}/aws-helpers
fi
chmod +x $AWS_HELPERS_FILE
source $AWS_HELPERS_FILE

####################################
# Instance (Environment) Variables #
####################################

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function check_nhs_service {
  if [[ -z "${NHS_SERVICE}" ]]; then
    echo "Must set NHS_SERVICE"
    exit 1
  fi
}

function configure_repo_to_gp_service_auth_keys {
  parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/api-keys/repo-to-gp/e2e-test"
  export REPO_TO_GP_AUTHORIZATION_KEYS=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${parameter_name} | jq -r .Parameter.Value")
}

function configure_gp_to_repo_service_auth_keys {
  parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/api-keys/gp-to-repo/e2e-test"
  export GP_TO_REPO_AUTHORIZATION_KEYS=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${parameter_name} | jq -r .Parameter.Value")
}

function configure_gp2gp_adaptor_service_auth_keys {
  parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/api-keys/gp2gp-adaptor/e2e-test"
  export GP2GP_ADAPTOR_AUTHORIZATION_KEYS=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${parameter_name} | jq -r .Parameter.Value")
}

function configure_ehr_repo_service_auth_keys {
  parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/api-keys/ehr-repo/e2e-test"
  export EHR_REPO_AUTHORIZATION_KEYS=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${parameter_name} | jq -r .Parameter.Value")
}

function configure_queue_access {
  queue_username_parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/mq-app-username"
  queue_password_parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/mq-app-password"
  amqp_queue_url_parameter_name="/repo/${NHS_ENVIRONMENT}/output/prm-deductions-infra/amqp-endpoint-active"
  export QUEUE_USERNAME=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${queue_username_parameter_name} | jq -r .Parameter.Value")
  export QUEUE_PASSWORD=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${queue_password_parameter_name} | jq -r .Parameter.Value")
  export AMQP_QUEUE_URL=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${amqp_queue_url_parameter_name} | jq -r .Parameter.Value")
}

function _configure_mtls_certificates {
  client_key_parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/external/repo-mhs-client-key"
  client_cert_parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/external/repo-mhs-client-cert"
  ca1_parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/external/e2e-tests-mhs-ca1"
  ca2_parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/external/e2e-tests-mhs-ca2"
  mkdir -p certs/${NHS_ENVIRONMENT}
  aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${client_key_parameter_name} | jq -r .Parameter.Value > certs/${NHS_ENVIRONMENT}/repo-client.key
  aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${client_cert_parameter_name} | jq -r .Parameter.Value > certs/${NHS_ENVIRONMENT}/repo-client.crt
  aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${ca1_parameter_name} | jq -r .Parameter.Value > certs/${NHS_ENVIRONMENT}/repo-ca1.crt
  aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${ca2_parameter_name} | jq -r .Parameter.Value > certs/${NHS_ENVIRONMENT}/repo-ca2.crt
}

function configure_service_urls {
  check_env
  export REPO_TO_GP_URL="https://repo-to-gp.${NHS_ENVIRONMENT}.non-prod.patient-deductions.nhs.uk"
  export EHR_REPO_URL="https://ehr-repo.${NHS_ENVIRONMENT}.non-prod.patient-deductions.nhs.uk"
  export GP2GP_ADAPTOR_URL="https://gp2gp-adaptor.${NHS_ENVIRONMENT}.non-prod.patient-deductions.nhs.uk"
  export GP_TO_REPO_URL="https://gp-to-repo.${NHS_ENVIRONMENT}.non-prod.patient-deductions.nhs.uk"

  ods_code=$(get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/gp2gp-adaptor-deductions-ods-code")
  export MHS_INBOUND_URL=https://in-${ods_code}.mhs.${NHS_ENVIRONMENT}.non-prod.patient-deductions.nhs.uk
}

####################
# Script Functions #
####################

function send_canary_update_message {
  check_nhs_service
  node scripts/send-canary-update.js $(npm outdated --parseable)
}

function configure_hangout_webhook {
  export GOOGLE_CHAT_CANARY_WEBHOOK=$(get_aws_ssm_secret "/repo/prod/user-input/external/gocd-google-chat-canary-webhook")
  if [ -z "${GOOGLE_CHAT_CANARY_WEBHOOK}" ]; then
    echo "Unable to obtain GOOGLE_CHAT_CANARY_WEBHOOK from AWS"
    exit 5
  fi
}

###########
## TASKS ##
###########

command="$1"
case "${command}" in
  update_package_json)
      dojo "npx npm-check-updates -u"
      ;;
  send_dead_canary_message)
      check_nhs_service
      configure_hangout_webhook
      dojo "node scripts/send-canary-error.js"
      ;;
  _dep)
      npm install
      npm audit
      ;;
  dep)
      dojo "./tasks _dep"
      ;;
  _list_outdated)
      npm install
      npm outdated > outdated-dependencies.txt || send_canary_update_message
      ;;
  list_outdated)
      configure_hangout_webhook
      dojo "./tasks _list_outdated"
      ;;
  _test_lint)
      npm install
      npm run lint
      ;;
  test_lint)
      dojo "./tasks _test_lint"
      ;;
  _configure_mtls_certificates)
      _configure_mtls_certificates
      ;;
  _test_e2e)
      npm install
      npm run test
      ;;
  test_e2e)
      check_env
      _assume_environment_role $NHS_ENVIRONMENT
      configure_service_urls
      configure_repo_to_gp_service_auth_keys
      configure_ehr_repo_service_auth_keys
      configure_gp_to_repo_service_auth_keys
      configure_gp2gp_adaptor_service_auth_keys
      ./tasks _configure_mtls_certificates
      dojo "./tasks _test_e2e"
      ;;
  _test_e2e_test_harness)
      npm install
      npm run queue:purge
      npm run test
      ;;
  test_e2e_test_harness)
      check_env
      export USE_TEST_HARNESS=true
      _assume_environment_role $NHS_ENVIRONMENT
      configure_queue_access
      configure_repo_to_gp_service_auth_keys
      configure_ehr_repo_service_auth_keys
      configure_gp_to_repo_service_auth_keys
      configure_gp2gp_adaptor_service_auth_keys
      configure_service_urls
      ./tasks _configure_mtls_certificates
      dojo "./tasks _test_e2e_test_harness"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
